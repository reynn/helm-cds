---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cds.fullname" . }}-api
  labels:
    app.kubernetes.io/name: {{ include "cds.name" . }}-api
    helm.sh/chart: {{ include "cds.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.api.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "cds.name" . }}-api
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "cds.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: "{{ template "cds.fullname" . }}-api"
          image: "{{ .Values.api.registry }}/{{ .Values.api.repository }}:{{ .Values.api.tag }}"
          imagePullPolicy: {{ .Values.api.pullPolicy | quote }}
          command: ["/bin/sh"]
          args: ["-c", "/app/cds-engine-linux-amd64 start api --config /config/config.toml"]
          env:
            - name: CDS_API_AUTH_SHAREDINFRATOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ template "cds.fullname" . }}-secrets
                  key: sharedInfraToken
            - name: CDS_API_SECRETS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ template "cds.fullname" . }}-secrets
                  key: secretsToken
          ports:
            - name: http
              containerPort: {{ .Values.api.ports.http }}
            - name: grpc
              containerPort: {{ .Values.api.ports.grpc }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- .Values.api.resources | default .Values.commonConfig.resources | toYaml | nindent 12 }}
          volumeMounts:
            - name: cds-data
              mountPath: {{ .Values.api.persistence.mountPath }}
            - name: cds-config
              mountPath: /config
      volumes:
        - name: cds-config
          configMap:
            name: {{ include "cds.fullname" . }}-config
        - name: cds-data
          {{- if .Values.api.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.api.persistence.existingClaim | default (printf "%s-api-pvc" (include "cds.fullname" .)) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      nodeSelector:
        {{- .Values.api.nodeSelector | default .Values.commonConfig.nodeSelector| toYaml | nindent 8 }}
      affinity:
        {{- .Values.api.affinity | default .Values.commonConfig.affinity | toYaml | nindent 8 }}
      tolerations:
        {{- .Values.api.tolerations | default .Values.commonConfig.tolerations | toYaml | nindent 8 }}
