kind: ConfigMap
{{- $service := "configmap" }}
apiVersion: v1
metadata:
  name: {{ include "cds.fullname" . }}-{{ $service }}
  labels:
    helm.sh/chart: "{{ .Chart.Name }}"
    app.kubernetes.io/name: {{ include "cds.fullname" . }}-{{ $service }}
    app.kubernetes.io/role: "{{ $service }}"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
data:
  config.toml: |
    #####################
    # API Configuration
    #####################
    [api]
      # if no model and no os/arch is specified in your job's requirements then spawn worker on this architecture (example: amd64, arm, 386)
      defaultArch = "amd64"
      # if no model and os/arch is specified in your job's requirements then spawn worker on this operating system (example: freebsd, linux, windows)
      defaultOS = "linux"

      # Either filesystem local storage or Openstack Swift Storage are supported
      [api.artifact]
        # swift or local
        mode = "{{.Values.api.config.artifact.mode}}"

        {{- if eq .Values.api.config.artifact.mode "openstack" }}
        [api.artifact.openstack]
          # Use if your want to prefix containers for CDS Artifacts
          containerPrefix = {{ .Values.api.config.artifact.openstack.containerPrefix }}
          # True if you want to disable Temporary URL in file upload
          disableTempURL = {{ .Values.api.config.artifact.openstack.disableTempUrl }}
          # Openstack Domain, generally value of $OS_DOMAIN_NAME, v3 auth only
          domain = {{ .Values.api.config.artifact.openstack.domain }}
          # Openstack Password, generally value of $OS_PASSWORD
          password = {{ .Values.api.config.artifact.openstack.password }}
          # Region, generally value of $OS_REGION_NAME
          region = {{ .Values.api.config.artifact.openstack.region }}
          # Openstack Tenant, generally value of $OS_TENANT_NAME, v2 auth only
          tenant = {{ .Values.api.config.artifact.openstack.tenant }}
          # Authentication Endpoint, generally value of $OS_AUTH_URL
          url = {{ .Values.api.config.artifact.openstack.url }}
          # Openstack Username, generally value of $OS_USERNAME
          username = {{ .Values.api.config.artifact.openstack.username }}
        {{- else }}
        [api.artifact.local]
          baseDirectory = {{ .Values.api.config.artifact.local.baseDirectory | quote }}
        {{- end }}
      ##############################
      # CDS Authentication Settings#
      ##############################
      [api.auth]
        {{- if .Values.api.config.auth.defaultGroup }}
        # The default group is the group in which every new user will be granted at signup
        defaultGroup = {{ .Values.api.config.auth.defaultGroup | quote }}
        {{- end }}

        {{- if eq .Values.api.config.auth.type "ldap" }}
        [api.auth.ldap]
          base = {{ .Values.api.config.auth.ldap.base | quote }}
          # Define it if ldapsearch need to be authenticated
          bindDN = {{ .Values.api.config.auth.ldap.bindDN | quote }}
          # Define it if ldapsearch need to be authenticated
          bindPwd = {{ .Values.api.config.auth.ldap.bindPwd | quote }}
          dn = {{ .Values.api.config.auth.ldap.dn | quote }}
          enable = true
          fullname = {{ .Values.api.config.auth.ldap.fullname | quote }}
          host = {{ .Values.api.config.auth.ldap.host | quote }}
          port = {{ .Values.api.config.auth.ldap.port }}
          ssl = {{ .Values.api.config.auth.ldap.ssl }}
        {{- else if eq .Values.api.config.auth.type "local" }}
        [api.auth.local]
          {{- if .Values.api.config.auth.local.signupAllowedDomains }}
          # Allow signup from selected domains only - comma separated. Example: your-domain.com,another-domain.com
          signupAllowedDomains = {{ .Values.api.config.auth.local.signupAllowedDomains | quote }}
          {{- end }}
        {{- end }}
      {{- if .Values.commonConfig.cache.enabled }}
      ######################
      # CDS Cache Settings
      ######################
      #
      [api.cache]
        ttl = {{ .Values.commonConfig.cache.ttl }}
      {{- end }}

      ################################
      # Postgresql Database settings
      ################################
      [api.database]
        # Maximum wait for connection, in seconds
        connectTimeout = {{ .Values.api.config.database.connectTimeout }}
        host = {{ .Values.api.config.database.host | quote }}
        # DB Max connection
        maxconn = {{ .Values.api.config.database.maxconn }}
        name = {{ .Values.api.config.database.name | quote }}
        port = {{ .Values.api.config.database.port }}
        # Set a specific role to run SET ROLE for each connection
        {{- if .Values.api.config.database.role }}
        role = {{ .Values.api.config.database.role | quote }}
        {{- end }}
        # DB SSL Mode: require (default), verify-full, or disable
        sslmode = {{ .Values.api.config.database.sslmode | quote }}
        # Statement timeout value in milliseconds
        timeout = {{ .Values.api.config.database.timeout }}
        user = {{ .Values.api.config.database.user | quote }}

      [api.directories]
        download = "{{ .Values.api.config.directories.download }}"
        keys = "{{ .Values.api.config.directories.keys }}"

      #######################
      # CDS Events Settings
      #######################
      [api.events]
        {{- if .Values.api.config.events.kafka.enabled  }}
        [api.events.kafka]
          broker = {{ .Values.api.config.events.kafka.broker }}
          enabled = true
          maxmessagebytes = {{ .Values.api.config.events.kafka.maxmessagebytes }}
          password = {{ .Values.api.config.events.kafka.password }}
          topic = {{ .Values.api.config.events.kafka.topic }}
          user = {{ .Values.api.config.events.kafka.user }}
        {{- end }}

      ###########################
      # CDS Features flipping Settings
      ###########################
      [api.features]
        {{- if .Values.api.config.features.izanami.enabled }}
        # Feature flipping provider: https://maif.github.io/izanami
        [api.features.izanami]
          apiurl = {{ .Values.api.config.features.izanami.apiurl | quote }}
          clientid = {{ .Values.api.config.features.izanami.clientid | quote }}
          clientsecret = {{ .Values.api.config.features.izanami.clientsecret | quote }}
          # Token shared between Izanami and CDS to be able to send webhooks from izanami
          token = {{ .Values.api.config.features.izanami.token | quote }}
        {{- end }}

      {{- if .Values.commonConfig.graylog.enabled }}
      ###########################
      # Graylog Search.
      # When CDS API generates errors, you can fetch them with cdsctl.
      # Examples:
      # $ cdsctl admin errors get <error-id>
      # $ cdsctl admin errors get 55f6e977-d39b-11e8-8513-0242ac110007
      ###########################
      [api.graylog]
        accessToken = {{ .Values.commonConfig.graylog.accessToken | quote }}
        stream = {{ .Values.commonConfig.graylog.stream | quote }}
        # Example: http://localhost:9000
        url = {{ .Values.commonConfig.graylog.url | quote }}
      {{- end }}

      [api.grpc]
        # Listen GRPC address without port, example: 127.0.0.1
        # addr = ""
        port = {{ .Values.api.ports.grpc }}

      [api.http]
        # Listen HTTP address without port, example: 127.0.0.1
        port = {{ .Values.api.ports.http }}
        sessionTTL = 60

      ###########################
      # Log settings.
      ###########################
      [api.log]
        # Max service logs size in bytes (default: 15MB)
        serviceMaxSize = {{ default .Values.commonConfig.log.serviceMaxSize .Values.api.config.log.serviceMaxSize }}
        # Max step logs size in bytes (default: 15MB)
        stepMaxSize = {{ default .Values.commonConfig.log.stepMaxSize .Values.api.config.log.stepMaxSize }}


      {{- range .Values.api.config.providers }}
      [[api.providers]]
        name = "{{ .name }}"
        token = "{{ .token }}"
      {{- end }}

      {{- range .Values.api.config.services }}
      [[api.services]]
        healthPath = {{ .healthPath | quote }}
        healthPort = {{ .healthPort }}
        healthUrl = {{ .healthUrl | quote }}
        name = {{ .name | quote }}
        path = {{ .path | quote }}
        port = {{ .port }}
        type = {{ .type | quote }}
        url = {{ .url | quote }}
      {{- end }}

      #####################
      ## CDS SMTP Settings
      #####################
      [api.smtp]
      {{- if .Values.api.config.smtp.enabled  }}
        disable = false
        from = {{ .Values.api.config.smtp.from | quote }}
        host = {{ .Values.api.config.smtp.host | quote }}
        password = {{ .Values.api.config.smtp.password | quote }}
        port = {{ .Values.api.config.smtp.port }}
        tls = {{ .Values.api.config.smtp.tls }}
        user = {{ .Values.api.config.smtp.user | quote }}
      {{- else }}
        disable = true
      {{- end }}

      ###########################
      # CDS Status Settings
      # Documentation: https://ovh.github.io/cds/hosting/monitoring/
      ###########################
      [api.status]
        [api.status.api]
          # if less than minInstance of API is running, an alert will on Global/API be created on /mon/status
          minInstance = {{ .Values.api.config.counts.api }}

        [api.status.dbmigrate]
          # if less than minInstance of dbmigrate service is running, an alert on Global/dbmigrate will be created on /mon/status
          minInstance = {{ .Values.api.config.counts.dbmigrate }}

        [api.status.elasticsearch]
          # if less than minInstance of elasticsearch service is running, an alert on Global/elasticsearch will be created on /mon/status
          minInstance = {{ .Values.api.config.counts.elasticsearch }}

        [api.status.hatchery]
          # if less than minInstance of hatchery service is running, an alert on Global/hatchery will be created on /mon/status
          minInstance = {{ .Values.api.config.counts.hatchery }}

        [api.status.hooks]
          # if less than minInstance of hooks service is running, an alert on Global/hooks will be created on /mon/status
          minInstance = {{ .Values.api.config.counts.hooks }}

        [api.status.repositories]
          # if less than minInstance of repositories service is running, an alert on Global/hooks will be created on /mon/status
          minInstance = {{ .Values.api.config.counts.repositories }}

        [api.status.vcs]
          # if less than minInstance of vcs service is running, an alert will on Global/vcs be created on /mon/status
          minInstance = {{ .Values.api.config.counts.vcs }}

      #####################
      # CDS URLs Settings
      #####################
      [api.url]
        {{- if .Values.ingress.enabled }}
        api = {{ .Values.commonConfig.urls.api.public | quote }}
        ui = {{ .Values.commonConfig.urls.ui.public | quote }}
        {{- else }}
        api = {{ template "cds.api.proxy" . | quote }}
        ui = {{ template "cds.ui.proxy" . | quote }}
        {{- end }}

      {{- if .Values.api.config.vault.enable }}
      [api.vault]
        configurationKey = {{ .Values.api.config.vault.key | quote }}
      {{- end }}
      {{/* --- end of API section --- */}}

      {{- if .Values.elasticsearch.enabled -}}
      ######################
      # CDS ElasticSearch Settings
      # This is use for CDS timeline and is optional
      #######################
      [elasticsearch]
        URL = "http://{{ include "cds.fullname" . }}-elasticsearch"

        ######################
        # CDS Indexes Settings
        #######################
        [elasticsearch.api]
          # Maximum allowed consecutives failures on heatbeat routine
          maxHeartbeatFailures = {{ .Values.commonConfig.maxHeartbeatFailures }}
          # Request CDS API: timeout in seconds
          requestTimeout = {{ .Values.commonConfig.requestTimeout }}

          [elasticsearch.api.grpc]
            # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
            insecure = {{ .Values.commonConfig.urls.insecure }}
            # CDS API URL
            url = {{ include "cds.api.service.grpc" . | quote }}

          [elasticsearch.api.http]
            # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
            insecure = {{ .Values.commonConfig.urls.insecure }}
            # CDS API URL
            url = {{ include "cds.api.service.http" . | quote }}

        ######################
        # CDS ElasticSearch Settings
        #Support for elasticsearch 5.6
        #######################
        [elasticsearch.elasticsearch]

          # index to store CDS events
          indexEvents = "cds-events"

          # index to store CDS metrics
          indexMetrics = "cds-metrics"
          url = "http://{{ template "cds.elasticsearch.fullname" . }}-client:9200"

        ######################
        # CDS Elasticsearch HTTP Configuration
        #######################
        [elasticsearch.http]

          # Listen address without port, example: 127.0.0.1
          # addr = ""
          port = 8088
    {{- end }}
    {{/* --- end of ElasticSearch section --- */}}

    {{- if .Values.hatchery.enabled }}
    [hatchery]
      [hatchery.kubernetes]
        # Worker default memory in Mo
        defaultMemory = {{ .Values.hatchery.config.defaultMemory }}
        # Kubernetes namespace in which workers are spawned
        namespace = "{{ .Release.Namespace }}"
        # Address of kubernetes master
        kubernetesMasterURL = {{ .Values.hatchery.config.masterUrl | quote }}
        # Nb Workers to provision
        nbProvision = {{ .Values.hatchery.config.nbProvision }}
        # Worker TTL (minutes)
        workerTTL = {{ .Values.hatchery.config.workerTTL }}

        [hatchery.kubernetes.commonConfiguration]
          # URL of this Hatchery
          url = "http://{{ include "cds.fullname" . }}-hatchery"

          [hatchery.kubernetes.commonConfiguration.api]
            # Maximum allowed consecutives failures on heatbeat routine
            maxHeartbeatFailures = {{ .Values.commonConfig.maxHeartbeatFailures }}
            # Request CDS API: timeout in seconds
            requestTimeout = {{ .Values.commonConfig.requestTimeout }}

            [hatchery.kubernetes.commonConfiguration.api.grpc]
              # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
              insecure = {{ .Values.commonConfig.urls.insecure }}
              url = {{ include "cds.api.service.grpc" . | quote }}

            [hatchery.kubernetes.commonConfiguration.api.http]
              # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
              insecure = {{ .Values.commonConfig.urls.insecure }}
              # CDS API URL
              url = {{ include "cds.api.service.http" . | quote }}

          ######################
          # CDS Hatchery HTTP Configuration
          #######################
          [hatchery.kubernetes.commonConfiguration.http]
            port = {{ .Values.hatchery.port }}

          # Hatchery Log Configuration
          [hatchery.kubernetes.commonConfiguration.logOptions]
            [hatchery.kubernetes.commonConfiguration.logOptions.spawnOptions]
              # log critical if spawn take more than this value (in seconds)
              thresholdCritical = {{ .Values.commonConfig.log.thresholdCritical }}
              # log warning if spawn take more than this value (in seconds)
              thresholdWarning = {{ .Values.commonConfig.log.thresholdWarning }}

          [hatchery.kubernetes.commonConfiguration.provision]
            # Disabled provisioning. Format:true or false
            disabled = {{ .Values.hatchery.config.provision.disabled }}
            # Check provisioning each n Seconds
            frequency = {{ .Values.hatchery.config.provision.frequency }}
            # if worker is queued less than this value (seconds), hatchery does not take care of it
            graceTimeQueued = {{ .Values.hatchery.config.provision.graceTimeQueued }}
            # Maximum allowed simultaneous workers provisioning
            maxConcurrentProvisioning = {{ .Values.hatchery.config.provision.maxConcurrentProvisioning }}
            # Maximum allowed simultaneous workers
            maxWorker = {{ .Values.hatchery.config.provision.maxWorker }}
            # Check if some worker model have to be registered each n Seconds
            registerFrequency = {{ .Values.hatchery.config.provision.registerFrequency }}

            {{- if .Values.commonConfig.graylog.enabled }}
            # Worker Log Configuration
            [hatchery.kubernetes.commonConfiguration.provision.workerLogsOptions]
              [hatchery.kubernetes.commonConfiguration.provision.workerLogsOptions.graylog]
                # Example: X-OVH-TOKEN. You can use many keys: aaa,bbb
                extraKey = {{ .Values.commonConfig.graylog.extraKey | quote }}
                # value for extraKey field. For many keys: valueaaa,valuebbb
                extraValue = {{ .Values.commonConfig.graylog.extraValue | quote }}
                # Example: thot.ovh.com
                host = {{ .Values.commonConfig.graylog.host | quote }}
                # Example: 12202
                port = {{ .Values.commonConfig.graylog.port }}
                # tcp or udp
                protocol = {{ .Values.commonConfig.graylog.protocol | quote }}
            {{- end }}{{/* --- end of hatchery.log section --- */}}
    {{- end }}{{/* --- end of hatchery section --- */}}

    {{- if .Values.hooks.enabled }}
    ######################
    # CDS Hooks Settings
    #######################
    [hooks]
      URL = "http://{{ include "cds.fullname" . }}-hooks"
      # Disable all hooks executions
      disable = false
      # Number of execution to keep
      executionHistory = {{ .Values.hooks.config.executionHistory }}
      # Execution retry delay in seconds
      retryDelay = {{ .Values.hooks.config.retryDelay }}
      # Retry execution while this number of error is not reached
      retryError = {{ .Values.hooks.config.retryError }}
      {{- if .Values.hooks.config.urlPublic }}
      # Public url for external call (webhook)
      urlPublic = {{ .Values.hooks.config.urlPublic | quote }}
      {{- end }}

      ######################
      # CDS API Settings
      #######################
      [hooks.api]
        maxHeartbeatFailures = {{ .Values.commonConfig.maxHeartbeatFailures }}
        requestTimeout = {{ .Values.commonConfig.requestTimeout }}

        [hooks.api.grpc]
          # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
          insecure = {{ .Values.commonConfig.urls.insecure }}
          # CDS API URL
          url = {{ include "cds.api.service.grpc" . | quote }}

        [hooks.api.http]
          # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
          insecure = {{ .Values.commonConfig.urls.insecure }}
          # CDS API URL
          url = {{ include "cds.api.service.http" . | quote }}

      {{- if .Values.commonConfig.cache.enabled }}
      ######################
      # CDS Hooks Cache Settings
      ######################

      [hooks.cache]
        ttl = {{ .Values.commonConfig.cache.ttl }}
      {{- end }}

      ######################
      # CDS Hooks HTTP Configuration
      #######################
      [hooks.http]
        # Listen address without port, example: 127.0.0.1
        # addr = ""
        port = {{ .Values.hooks.port }}
    {{- end }} {{/* --- end of hooks section --- */}}

    #####################
    # CDS Logs Settings
    #####################
    [log]
      # Log Level: debug, info, warning, notice, critical
      level = {{ .Values.commonConfig.log.level | quote }}

      {{- if .Values.commonConfig.graylog.enabled }}
      [log.graylog]
        # Example: X-OVH-TOKEN. You can use many keys: aaa,bbb
        extraKey = {{ .Values.commonConfig.graylog.extraKey | quote }}
        # value for extraKey field. For many keys: valueaaa,valuebbb
        extraValue = {{ .Values.commonConfig.graylog.extraValue | quote }}
        # Example: thot.ovh.com
        host = {{ .Values.commonConfig.graylog.host | quote }}
        # Example: 12202
        port = {{ .Values.commonConfig.graylog.port }}
        # tcp or udp
        protocol = {{ .Values.commonConfig.graylog.protocol | quote }}
      {{- end }}

    {{- if .Values.repositories.enabled }}
    ######################
    # CDS Repositories Settings
    #######################
    [repositories]
      URL = "http://{{ include "cds.fullname" . }}-repositories"
      # Root directory where the service will store all checked-out repositories
      basedir = "/app/repositories"
      # Operation retention in redis store (in days)
      operation_retention = {{ .Values.repositories.config.retention.operation }}
      # Re retention on the filesystem (in days)
      repositories_retention = {{ .Values.repositories.config.retention.repositories }}

      ######################
      # CDS API Settings
      #######################
      [repositories.api]
        maxHeartbeatFailures = {{ .Values.commonConfig.maxHeartbeatFailures }}
        requestTimeout = {{ .Values.commonConfig.requestTimeout }}

        [repositories.api.grpc]
          # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
          insecure = {{ .Values.commonConfig.urls.insecure }}
          # CDS API URL
          url = {{ include "cds.api.service.grpc" . | quote }}

        [repositories.api.http]
          # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
          insecure = {{ .Values.commonConfig.urls.insecure }}
          # CDS API URL
          url = {{ include "cds.api.service.http" . | quote }}

      {{- if .Values.commonConfig.cache.enabled }}
      ######################
      # CDS Repositories Cache Settings
      ######################
      [repositories.cache]
        ttl = {{ .Values.commonConfig.cache.ttl }}
      {{- end }}

      ######################
      # CDS Repositories HTTP Configuration
      #######################
      [repositories.http]
        port = {{ .Values.repositories.port }}
    {{- end }} {{/* --- end of repositories section --- */}}

    {{- if .Values.vcs.enabled }}
    ######################
    # CDS VCS Settings
    #######################
    [vcs]
      URL = "http://{{ template "cds.fullname" . }}-vcs"

      [vcs.UI]
        [vcs.UI.http]
          {{- if .Values.ingress.enabled }}
          url = {{ .Values.commonConfig.urls.ui.public | quote }}
          {{- else }}
          url = {{ template "cds.ui.proxy" . | quote }}
          {{- end  }}

      ######################
      # CDS API Settings
      #######################
      [vcs.api]
        maxHeartbeatFailures = {{ .Values.commonConfig.maxHeartbeatFailures }}
        requestTimeout = {{ .Values.commonConfig.requestTimeout }}

        [vcs.api.grpc]
          # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
          insecure = {{ .Values.commonConfig.urls.insecure }}
          # CDS API URL
          url = {{ include "cds.api.service.http" . | quote }}

        [vcs.api.http]
          # sslInsecureSkipVerify, set to true if you use a self-signed SSL on CDS API
          insecure = {{ .Values.commonConfig.urls.insecure }}
          # CDS API URL
          url = {{ include "cds.api.service.http" . | quote }}

      {{- if .Values.commonConfig.cache.enabled }}
      ######################
      # CDS VCS Cache Settings
      ######################

      [vcs.cache]
        ttl = {{ .Values.commonConfig.cache.ttl }}
      {{- end }}

      ######################
      # CDS VCS HTTP Configuration
      #######################
      [vcs.http]
        port = {{ .Values.vcs.port }}

      {{- if or (.Values.vcs.config.bitbucket.enabled) (.Values.vcs.config.github.enabled) (.Values.vcs.config.gitlab.enabled) }}
      ######################
      # CDS VCS Server Settings
      #######################
      [vcs.servers]
        {{- if .Values.vcs.config.bitbucket.enabled }}
        [vcs.servers.Bitbucket]
          # URL of this VCS Server
          url = {{ .Values.vcs.config.bitbucket.url | quote }}

          [vcs.servers.Bitbucket.bitbucket]
            #######
            # CDS <-> Bitbucket. Documentation on https://ovh.github.io/cds/hosting/repositories-manager/bitbucket/
            ########
            # You can change the consumeKey if you want
            consumerKey = {{ .Values.vcs.config.bitbucket.consumerKey | quote }}
            # Does polling is supported by VCS Server
            disablePolling = {{ .Values.vcs.config.bitbucket.disablePolling }}
            # Does webhooks are supported by VCS Server
            disableWebHooks = {{ .Values.vcs.config.bitbucket.disableWebHooks }}
            # If you want to have a reverse proxy url for your repository webhook, for example if you put https://myproxy.com it will generate a webhook URL like this https://myproxy.com/UUID_OF_YOUR_WEBHOOK
            proxyWebhook = {{ .Values.vcs.config.bitbucket.proxyWebhook | quote }}
            # optional. Bitbucket username, used to add comment on Pull Request on failed build.
            username = {{ .Values.vcs.config.bitbucket.username | quote }}

            [vcs.servers.Bitbucket.bitbucket.Status]
              # Set to true if you don't want CDS to push statuses on the VCS server
              disable = {{ .Values.vcs.config.bitbucket.status.disable }}
        {{- end }} {{/* --- end of bitbucket config --- */}}
        {{- if .Values.vcs.config.github.enabled }}
        [vcs.servers.Github]
          # URL of this VCS Server
          url = {{ .Values.vcs.config.github.url | quote }}

          [vcs.servers.Github.github]
            #######
            # CDS <-> Github. Documentation on https://ovh.github.io/cds/hosting/repositories-manager/github/
            ########
            # Github OAuth Application Client ID
            clientId = {{ .Values.vcs.config.github.clientId | quote }}
            clientSecret = {{ .Values.vcs.config.github.clientSecret | quote }}
            # Does polling is supported by VCS Server
            disablePolling = {{ .Values.vcs.config.github.disablePolling }}
            # Does webhooks are supported by VCS Server
            disableWebHooks = {{ .Values.vcs.config.github.disableWebHooks }}
            # If you want to have a reverse proxy url for your repository webhook, for example if you put https://myproxy.com it will generate a webhook URL like this https://myproxy.com/UUID_OF_YOUR_WEBHOOK
            proxyWebhook = {{ .Values.vcs.config.github.proxyWebhook | quote }}
            # optional. Github username, used to add comment on Pull Request on failed build.
            username = {{ .Values.vcs.config.github.username | quote }}
            token = {{ .Values.vcs.config.github.token | quote }}

            [vcs.servers.Github.github.Status]
              # Set to true if you don't want CDS to push statuses on the VCS server
              disable = {{ .Values.vcs.config.github.status.disable }}
              # Set to true if you don't want CDS to push CDS URL in statuses on the VCS server
              showDetail = {{ .Values.vcs.config.github.status.showDetail }}
        {{- end }} {{/* --- end of github config --- */}}
        {{- if .Values.vcs.config.gitlab.enabled }}
        [vcs.servers.Gitlab]
          # URL of this VCS Server
          url = {{ .Values.vcs.config.gitlab.url | quote }}

          [vcs.servers.Gitlab.gitlab]
            #######
            # CDS <-> Gitlab. Documentation on https://ovh.github.io/cds/hosting/repositories-manager/gitlab/
            ########
            appId = {{ .Values.vcs.config.gitlab.appId | quote }}
            # Does polling is supported by VCS Server
            disablePolling = {{ .Values.vcs.config.gitlab.disablePolling }}
            # Does webhooks are supported by VCS Server
            disableWebHooks = {{ .Values.vcs.config.gitlab.disableWebHooks }}
            # If you want to have a reverse proxy url for your repository webhook, for example if you put https://myproxy.com it will generate a webhook URL like this https://myproxy.com/UUID_OF_YOUR_WEBHOOK
            proxyWebhook = {{ .Values.vcs.config.gitlab.proxyWebhook }}

            [vcs.servers.Gitlab.gitlab.Status]
              # Set to true if you don't want CDS to push statuses on the VCS server
              disable = {{ .Values.vcs.config.gitlab.status.disable }}
              # Set to true if you don't want CDS to push CDS URL in statuses on the VCS server
              showDetail = {{ .Values.vcs.config.gitlab.status.showDetail }}
        {{- end }} {{/* --- end of gitlab config --- */}}
      {{- end }} {{/* --- end of vcs server config --- */}}
    {{- end }} {{/* --- end of repositories section --- */}}
